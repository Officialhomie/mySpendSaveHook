Compiling 1 files with Solc 0.8.26
Solc 0.8.26 finished in 81.02s
Compiler run successful with warnings:
Warning (2519): This declaration shadows an existing declaration.
   --> src/SpendSaveStorage.sol:690:27:
    |
690 |     function getAllowance(address owner, address spender, uint256 id) external view onlyModule returns (uint256) {
    |                           ^^^^^^^^^^^^^
Note: The shadowed declaration is here:
  --> src/SpendSaveStorage.sol:32:5:
   |
32 |     address public owner;
   |     ^^^^^^^^^^^^^^^^^^^^

Warning (2519): This declaration shadows an existing declaration.
   --> src/SpendSaveStorage.sol:694:27:
    |
694 |     function setAllowance(address owner, address spender, uint256 id, uint256 amount) external onlyModule {
    |                           ^^^^^^^^^^^^^
Note: The shadowed declaration is here:
  --> src/SpendSaveStorage.sol:32:5:
   |
32 |     address public owner;
   |     ^^^^^^^^^^^^^^^^^^^^

Warning (8760): This declaration has the same name as another declaration.
   --> src/DCA.sol:191:9:
    |
191 |         bool enableDCA,
    |         ^^^^^^^^^^^^^^
Note: The other declaration is here:
   --> src/DCA.sol:154:5:
    |
154 |     function enableDCA(address user, address targetToken, bool enabled) external override onlyAuthorized(user) nonReentrant {
    |     ^ (Relevant source part starts here and spans across multiple lines).

Warning (8760): This declaration has the same name as another declaration.
   --> src/DCA.sol:342:16:
    |
342 |         (,,,,, bool enableDCA,,) = storage_.getUserSavingStrategy(user);
    |                ^^^^^^^^^^^^^^
Note: The other declaration is here:
   --> src/DCA.sol:154:5:
    |
154 |     function enableDCA(address user, address targetToken, bool enabled) external override onlyAuthorized(user) nonReentrant {
    |     ^ (Relevant source part starts here and spans across multiple lines).

Warning (2519): This declaration shadows an existing declaration.
  --> src/DCA.sol:71:5:
   |
71 |     error InsufficientSavings(address token, uint256 requested, uint256 available);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Note: The shadowed declaration is here:
  --> src/SpendSaveStorage.sol:22:1:
   |
22 | error InsufficientSavings();
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning (2519): This declaration shadows an existing declaration.
  --> src/DailySavings.sol:91:5:
   |
91 |     error InsufficientBalance(uint256 required, uint256 available);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Note: The shadowed declaration is here:
  --> src/SpendSaveStorage.sol:26:1:
   |
26 | error InsufficientBalance();
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning (2519): This declaration shadows an existing declaration.
  --> src/DailySavings.sol:93:5:
   |
93 |     error InsufficientSavings(address token, uint256 required, uint256 available);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Note: The shadowed declaration is here:
  --> src/SpendSaveStorage.sol:22:1:
   |
22 | error InsufficientSavings();
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning (2519): This declaration shadows an existing declaration.
  --> src/DailySavings.sol:98:5:
   |
98 |     error ReentrancyGuardReentered();
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Note: The shadowed declaration is here:
  --> src/SpendSaveStorage.sol:28:1:
   |
28 | error ReentrancyGuardReentered();
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning (2519): This declaration shadows an existing declaration.
  --> src/SavingStrategy.sol:80:5:
   |
80 |     event InsufficientBalance(address indexed actualUser, address indexed token, uint256 required, uint256 available);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Note: The shadowed declaration is here:
  --> src/SpendSaveStorage.sol:26:1:
   |
26 | error InsufficientBalance();
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning (2519): This declaration shadows an existing declaration.
  --> src/Savings.sol:37:5:
   |
37 |     error InsufficientSavings(address token, uint256 requested, uint256 available);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Note: The shadowed declaration is here:
  --> src/SpendSaveStorage.sol:22:1:
   |
22 | error InsufficientSavings();
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning (2519): This declaration shadows an existing declaration.
  --> src/Token.sol:34:5:
   |
34 |     error InsufficientBalance(address owner, uint256 tokenId, uint256 requested, uint256 available);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Note: The shadowed declaration is here:
  --> src/SpendSaveStorage.sol:26:1:
   |
26 | error InsufficientBalance();
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning (5667): Unused function parameter. Remove or comment out the variable name to silence this warning.
   --> src/SpendSaveStorage.sol:291:39:
    |
291 |     function _calculateAndTransferFee(address user, address token, uint256 amount) internal returns (uint256) {
    |                                       ^^^^^^^^^^^^

Warning (2072): Unused local variable.
   --> src/DCA.sol:498:13:
    |
498 |             uint256 amount,
    |             ^^^^^^^^^^^^^^

Warning (5667): Unused function parameter. Remove or comment out the variable name to silence this warning.
   --> src/DCA.sol:818:9:
    |
818 |         PoolKey memory poolKey,
    |         ^^^^^^^^^^^^^^^^^^^^^^

Warning (5667): Unused function parameter. Remove or comment out the variable name to silence this warning.
   --> src/DCA.sol:878:9:
    |
878 |         SpendSaveStorage.DCAExecution memory dca
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning (5667): Unused function parameter. Remove or comment out the variable name to silence this warning.
   --> src/SlippageControl.sol:105:9:
    |
105 |         address fromToken,
    |         ^^^^^^^^^^^^^^^^^

Warning (2072): Unused local variable.
   --> src/SpendSaveHook.sol:266:13:
    |
266 |             address inputToken = context.inputToken;
    |             ^^^^^^^^^^^^^^^^^^

Warning (5667): Unused function parameter. Remove or comment out the variable name to silence this warning.
   --> src/SpendSaveHook.sol:375:9:
    |
375 |         IPoolManager.SwapParams calldata params,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning (5667): Unused function parameter. Remove or comment out the variable name to silence this warning.
   --> src/SpendSaveHook.sol:622:9:
    |
622 |         address user,
    |         ^^^^^^^^^^^^

Warning (5667): Unused function parameter. Remove or comment out the variable name to silence this warning.
   --> src/SpendSaveHook.sol:667:9:
    |
667 |         bytes calldata data
    |         ^^^^^^^^^^^^^^^^^^^

Warning (5667): Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> test/SpendSaveHook.t.sol:49:9:
   |
49 |         address actualUser, 
   |         ^^^^^^^^^^^^^^^^^^

Warning (5667): Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> test/SpendSaveHook.t.sol:50:9:
   |
50 |         PoolKey calldata key,
   |         ^^^^^^^^^^^^^^^^^^^^

Warning (5667): Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> test/SpendSaveHook.t.sol:51:9:
   |
51 |         IPoolManager.SwapParams calldata params
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning (5667): Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> test/SpendSaveHook.t.sol:70:9:
   |
70 |         address actualUser,
   |         ^^^^^^^^^^^^^^^^^^

Warning (5667): Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> test/SpendSaveHook.t.sol:71:9:
   |
71 |         SpendSaveStorage.SwapContext memory context
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning (5667): Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> test/SpendSaveHook.t.sol:79:9:
   |
79 |         uint256 amount,
   |         ^^^^^^^^^^^^^^

Warning (5667): Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> test/SpendSaveHook.t.sol:80:9:
   |
80 |         uint256 percentage,
   |         ^^^^^^^^^^^^^^^^^^

Warning (5667): Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> test/SpendSaveHook.t.sol:81:9:
   |
81 |         bool roundUp
   |         ^^^^^^^^^^^^

Warning (2072): Unused local variable.
   --> test/SpendSaveHook.t.sol:924:13:
    |
924 |             uint256 autoIncrement,
    |             ^^^^^^^^^^^^^^^^^^^^^

Warning (2072): Unused local variable.
   --> test/SpendSaveHook.t.sol:925:13:
    |
925 |             uint256 maxPercentage,
    |             ^^^^^^^^^^^^^^^^^^^^^

Warning (2072): Unused local variable.
   --> test/SpendSaveHook.t.sol:926:13:
    |
926 |             uint256 goalAmount,
    |             ^^^^^^^^^^^^^^^^^^

Warning (2072): Unused local variable.
   --> test/SpendSaveHook.t.sol:927:13:
    |
927 |             bool roundUpSavings,
    |             ^^^^^^^^^^^^^^^^^^^

Warning (2072): Unused local variable.
   --> test/SpendSaveHook.t.sol:928:13:
    |
928 |             bool enableDCA,
    |             ^^^^^^^^^^^^^^

Warning (2072): Unused local variable.
   --> test/SpendSaveHook.t.sol:930:13:
    |
930 |             address specificSavingsToken
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning (2072): Unused local variable.
   --> test/SpendSaveHook.t.sol:942:30:
    |
942 |         (BalanceDelta delta, uint256 amountIn, uint256 amountOut) = _performSwap(user1, true, -0.5 ether);
    |                              ^^^^^^^^^^^^^^^^

Warning (2072): Unused local variable.
   --> test/SpendSaveHook.t.sol:942:48:
    |
942 |         (BalanceDelta delta, uint256 amountIn, uint256 amountOut) = _performSwap(user1, true, -0.5 ether);
    |                                                ^^^^^^^^^^^^^^^^^

Warning (2072): Unused local variable.
   --> test/SpendSaveHook.t.sol:990:10:
    |
990 |         (BalanceDelta delta, uint256 amountIn, uint256 amountOut) = _performSwap(user1, true, -0.5 ether);
    |          ^^^^^^^^^^^^^^^^^^

Warning (2072): Unused local variable.
   --> test/SpendSaveHook.t.sol:990:48:
    |
990 |         (BalanceDelta delta, uint256 amountIn, uint256 amountOut) = _performSwap(user1, true, -0.5 ether);
    |                                                ^^^^^^^^^^^^^^^^^

Warning (2072): Unused local variable.
    --> test/SpendSaveHook.t.sol:1010:9:
     |
1010 |         uint256 expectedSavingsAfterFee = expectedSaveAmount - treasuryFee;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning (2072): Unused local variable.
    --> test/SpendSaveHook.t.sol:1061:10:
     |
1061 |         (BalanceDelta delta, uint256 amountIn, uint256 amountOut) = _performSwap(user1, true, -0.5 ether);
     |          ^^^^^^^^^^^^^^^^^^

Warning (2072): Unused local variable.
    --> test/SpendSaveHook.t.sol:1061:48:
     |
1061 |         (BalanceDelta delta, uint256 amountIn, uint256 amountOut) = _performSwap(user1, true, -0.5 ether);
     |                                                ^^^^^^^^^^^^^^^^^

Warning (2018): Function state mutability can be restricted to pure
   --> src/DCA.sol:978:5:
    |
978 |     function createPoolKey(address tokenA, address tokenB) internal view returns (PoolKey memory) {
    |     ^ (Relevant source part starts here and spans across multiple lines).

Warning (2018): Function state mutability can be restricted to pure
   --> src/SavingStrategy.sol:437:5:
    |
437 |     function _calculateInputSavings(
    |     ^ (Relevant source part starts here and spans across multiple lines).

Warning (2018): Function state mutability can be restricted to pure
   --> src/SpendSaveHook.sol:621:5:
    |
621 |     function _initDailySavingsProcessor(
    |     ^ (Relevant source part starts here and spans across multiple lines).

Warning (2018): Function state mutability can be restricted to view
   --> src/SpendSaveHook.sol:666:5:
    |
666 |     function lockAcquired(
    |     ^ (Relevant source part starts here and spans across multiple lines).

Warning (2018): Function state mutability can be restricted to view
   --> test/SpendSaveHook.t.sol:661:5:
    |
661 |     function testSetup() public {
    |     ^ (Relevant source part starts here and spans across multiple lines).


Ran 5 tests for test/SpendSaveHook.t.sol:SpendSaveHookTest
[FAIL: User should have spent token0] testBasicSwap() (gas: 853542)
Logs:
  ============ SETUP START ============
  Deploying core contracts...
  Deploying storage...
  Deploying modules...
  Hook deployed at: 0x00000000000000000000000000000000000000C8
  Hook flags: 200
  ============ SETUP COMPLETE ============
  Initializing test pool with hook...
  Pool initialized successfully
  Liquidity added in -60 to +60 range
  Liquidity added in -120 to +120 range
  Liquidity added for full range
  Savings Strategy Percentage: 1000
  Savings Type: 1
  User1 token0 balance before swap: 10000000000000000000000
  Performing swap:
    Sender: 0x0000000000000000000000000000000000000001
    Zero for One: true
    Amount Specified: 500000000000000000
    TokenIn: 0x15cF58144EF33af1e14b5208015d11F9143E27b9
    TokenOut: 0x212224D2F2d262cd093eE13240ca4873fcCBbA3C
    BalanceInBefore: 10000000000000000000000
    BalanceOutBefore: 10000000000000000000000
    Expected savings (10%): 50000000000000000
    Including sender in hook data
    Swap failed with bytes error: Unknown error
  User1 token0 balance after swap: 10000000000000000000000
  User1 savings balance: 0

Traces:
  [853542] SpendSaveHookTest::testBasicSwap()
    ├─ [11298] SpendSaveStorage::getUserSavingStrategy(ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   └─ ← [Return] 1000, 0, 1000, 0, false, false, 1, 0x0000000000000000000000000000000000000000
    ├─ [0] console::log("Savings Strategy Percentage:", 1000) [staticcall]
    │   └─ ← [Stop] 
    ├─ [0] console::log("Savings Type:", 1) [staticcall]
    │   └─ ← [Stop] 
    ├─ [2552] MockERC20::balanceOf(ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   └─ ← [Return] 10000000000000000000000 [1e22]
    ├─ [0] console::log("User1 token0 balance before swap:", 10000000000000000000000 [1e22]) [staticcall]
    │   └─ ← [Stop] 
    ├─ [0] VM::startPrank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [552] MockERC20::balanceOf(ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   └─ ← [Return] 10000000000000000000000 [1e22]
    ├─ [2552] MockERC20::balanceOf(ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   └─ ← [Return] 10000000000000000000000 [1e22]
    ├─ [0] console::log("Performing swap:") [staticcall]
    │   └─ ← [Stop] 
    ├─ [0] console::log("  Sender:", ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   └─ ← [Stop] 
    ├─ [0] console::log("  Zero for One:", true) [staticcall]
    │   └─ ← [Stop] 
    ├─ [0] console::log("  Amount Specified:", 500000000000000000 [5e17]) [staticcall]
    │   └─ ← [Stop] 
    ├─ [0] console::log("  TokenIn:", MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9]) [staticcall]
    │   └─ ← [Stop] 
    ├─ [0] console::log("  TokenOut:", MockERC20: [0x212224D2F2d262cd093eE13240ca4873fcCBbA3C]) [staticcall]
    │   └─ ← [Stop] 
    ├─ [0] console::log("  BalanceInBefore:", 10000000000000000000000 [1e22]) [staticcall]
    │   └─ ← [Stop] 
    ├─ [0] console::log("  BalanceOutBefore:", 10000000000000000000000 [1e22]) [staticcall]
    │   └─ ← [Stop] 
    ├─ [4405] MockERC20::approve(PoolSwapTest: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77])
    │   ├─ emit Approval(owner: ECRecover: [0x0000000000000000000000000000000000000001], spender: PoolSwapTest: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], amount: 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77])
    │   └─ ← [Return] true
    ├─ [4405] MockERC20::approve(TestSavingStrategy: [0xD16d567549A2a2a2005aEACf7fB193851603dd70], 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77])
    │   ├─ emit Approval(owner: ECRecover: [0x0000000000000000000000000000000000000001], spender: TestSavingStrategy: [0xD16d567549A2a2a2005aEACf7fB193851603dd70], amount: 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77])
    │   └─ ← [Return] true
    ├─ [24305] MockERC20::approve(Savings: [0x96d3F6c20EEd2697647F543fE6C08bC2Fbf39758], 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77])
    │   ├─ emit Approval(owner: ECRecover: [0x0000000000000000000000000000000000000001], spender: Savings: [0x96d3F6c20EEd2697647F543fE6C08bC2Fbf39758], amount: 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77])
    │   └─ ← [Return] true
    ├─ [1298] SpendSaveStorage::getUserSavingStrategy(ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   └─ ← [Return] 1000, 0, 1000, 0, false, false, 1, 0x0000000000000000000000000000000000000000
    ├─ [0] console::log("  Expected savings (10%):", 50000000000000000 [5e16]) [staticcall]
    │   └─ ← [Stop] 
    ├─ [0] console::log("  Including sender in hook data") [staticcall]
    │   └─ ← [Stop] 
    ├─ [741131] PoolSwapTest::swap(PoolKey({ currency0: 0x15cF58144EF33af1e14b5208015d11F9143E27b9, currency1: 0x212224D2F2d262cd093eE13240ca4873fcCBbA3C, fee: 3000, tickSpacing: 60, hooks: 0x00000000000000000000000000000000000000C8 }), SwapParams({ zeroForOne: true, amountSpecified: -500000000000000000 [-5e17], sqrtPriceLimitX96: 4295128740 [4.295e9] }), TestSettings({ takeClaims: true, settleUsingBurn: true }), 0x0000000000000000000000000000000000000000000000000000000000000001)
    │   ├─ [735921] PoolManager::unlock(0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000015cf58144ef33af1e14b5208015d11f9143e27b9000000000000000000000000212224d2f2d262cd093ee13240ca4873fccbba3c0000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000000c80000000000000000000000000000000000000000000000000000000000000001fffffffffffffffffffffffffffffffffffffffffffffffff90fa4a62c4e000000000000000000000000000000000000000000000000000000000001000276a4000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001)
    │   │   ├─ [734599] PoolSwapTest::unlockCallback(0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000015cf58144ef33af1e14b5208015d11f9143e27b9000000000000000000000000212224d2f2d262cd093ee13240ca4873fccbba3c0000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000000c80000000000000000000000000000000000000000000000000000000000000001fffffffffffffffffffffffffffffffffffffffffffffffff90fa4a62c4e000000000000000000000000000000000000000000000000000000000001000276a4000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001)
    │   │   │   ├─ [552] MockERC20::balanceOf(ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   │   │   │   └─ ← [Return] 10000000000000000000000 [1e22]
    │   │   │   ├─ [2552] MockERC20::balanceOf(PoolManager: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f]) [staticcall]
    │   │   │   │   └─ ← [Return] 10089770927164204436 [1.008e19]
    │   │   │   ├─ [862] PoolManager::exttload(0x85be7c2bd5cfd9e6e3a30072d5be012f0c0649c579d3433f4d5ee458bdb429be) [staticcall]
    │   │   │   │   └─ ← [Return] 0x0000000000000000000000000000000000000000000000000000000000000000
    │   │   │   ├─ [552] MockERC20::balanceOf(ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   │   │   │   └─ ← [Return] 10000000000000000000000 [1e22]
    │   │   │   ├─ [2552] MockERC20::balanceOf(PoolManager: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f]) [staticcall]
    │   │   │   │   └─ ← [Return] 10089770927164204436 [1.008e19]
    │   │   │   ├─ [862] PoolManager::exttload(0xec1690143798fa6d9be0e2ae9987311729015febf65e065811da6492f94dd07b) [staticcall]
    │   │   │   │   └─ ← [Return] 0x0000000000000000000000000000000000000000000000000000000000000000
    │   │   │   ├─ [706142] PoolManager::swap(PoolKey({ currency0: 0x15cF58144EF33af1e14b5208015d11F9143E27b9, currency1: 0x212224D2F2d262cd093eE13240ca4873fcCBbA3C, fee: 3000, tickSpacing: 60, hooks: 0x00000000000000000000000000000000000000C8 }), SwapParams({ zeroForOne: true, amountSpecified: -500000000000000000 [-5e17], sqrtPriceLimitX96: 4295128740 [4.295e9] }), 0x0000000000000000000000000000000000000000000000000000000000000001)
    │   │   │   │   ├─ [217623] 0x00000000000000000000000000000000000000C8::beforeSwap(PoolSwapTest: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], PoolKey({ currency0: 0x15cF58144EF33af1e14b5208015d11F9143E27b9, currency1: 0x212224D2F2d262cd093eE13240ca4873fcCBbA3C, fee: 3000, tickSpacing: 60, hooks: 0x00000000000000000000000000000000000000C8 }), SwapParams({ zeroForOne: true, amountSpecified: -500000000000000000 [-5e17], sqrtPriceLimitX96: 4295128740 [4.295e9] }), 0x0000000000000000000000000000000000000000000000000000000000000001)
    │   │   │   │   │   ├─ [1298] SpendSaveStorage::getUserSavingStrategy(ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   │   │   │   │   │   └─ ← [Return] 1000, 0, 1000, 0, false, false, 1, 0x0000000000000000000000000000000000000000
    │   │   │   │   │   ├─ [11609] 0x00000000000000000000000000000000000000C8::checkModulesInitialized() [staticcall]
    │   │   │   │   │   │   └─ ← [Stop] 
    │   │   │   │   │   ├─ [192022] TestSavingStrategy::beforeSwap(ECRecover: [0x0000000000000000000000000000000000000001], PoolKey({ currency0: 0x15cF58144EF33af1e14b5208015d11F9143E27b9, currency1: 0x212224D2F2d262cd093eE13240ca4873fcCBbA3C, fee: 3000, tickSpacing: 60, hooks: 0x00000000000000000000000000000000000000C8 }), SwapParams({ zeroForOne: true, amountSpecified: -500000000000000000 [-5e17], sqrtPriceLimitX96: 4295128740 [4.295e9] }))
    │   │   │   │   │   │   ├─ [2998] SpendSaveStorage::spendSaveHook() [staticcall]
    │   │   │   │   │   │   │   └─ ← [Return] 0x00000000000000000000000000000000000000C8
    │   │   │   │   │   │   ├─ [1298] SpendSaveStorage::getUserSavingStrategy(ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   │   │   │   │   │   │   └─ ← [Return] 1000, 0, 1000, 0, false, false, 1, 0x0000000000000000000000000000000000000000
    │   │   │   │   │   │   ├─ [2614] SpendSaveStorage::dcaTargetToken(ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   │   │   │   │   │   │   └─ ← [Return] 0x0000000000000000000000000000000000000000
    │   │   │   │   │   │   ├─ [3790] SpendSaveStorage::poolManager() [staticcall]
    │   │   │   │   │   │   │   └─ ← [Return] PoolManager: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f]
    │   │   │   │   │   │   ├─ [26215] PoolManager::mint(TestSavingStrategy: [0xD16d567549A2a2a2005aEACf7fB193851603dd70], 124512733235148509670984850249661524172173354937 [1.245e47], 50000000000000000 [5e16])
    │   │   │   │   │   │   │   ├─ emit Transfer(caller: TestSavingStrategy: [0xD16d567549A2a2a2005aEACf7fB193851603dd70], from: 0x0000000000000000000000000000000000000000, to: TestSavingStrategy: [0xD16d567549A2a2a2005aEACf7fB193851603dd70], id: 124512733235148509670984850249661524172173354937 [1.245e47], amount: 50000000000000000 [5e16])
    │   │   │   │   │   │   │   └─ ← [Stop] 
    │   │   │   │   │   │   ├─ [139426] SpendSaveStorage::setSwapContext(ECRecover: [0x0000000000000000000000000000000000000001], SwapContext({ hasStrategy: true, currentPercentage: 1000, roundUpSavings: false, enableDCA: false, dcaTargetToken: 0x0000000000000000000000000000000000000000, currentTick: 0, savingsTokenType: 1, specificSavingsToken: 0x0000000000000000000000000000000000000000, inputToken: 0x15cF58144EF33af1e14b5208015d11F9143E27b9, inputAmount: 500000000000000000 [5e17], pendingSaveAmount: 50000000000000000 [5e16] }))
    │   │   │   │   │   │   │   └─ ← [Stop] 
    │   │   │   │   │   │   ├─ emit BeforeSwapCalled(user: ECRecover: [0x0000000000000000000000000000000000000001], inputToken: MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], inputAmount: 500000000000000000 [5e17], returnDelta: 17014118346046923173168730371588410572800000000000000000 [1.701e55])
    │   │   │   │   │   │   └─ ← [Return] 17014118346046923173168730371588410572800000000000000000 [1.701e55]
    │   │   │   │   │   ├─ emit BeforeSwapExecuted(user: ECRecover: [0x0000000000000000000000000000000000000001], delta: 17014118346046923173168730371588410572800000000000000000 [1.701e55])
    │   │   │   │   │   └─ ← [Return] 0x575e24b4, 17014118346046923173168730371588410572800000000000000000 [1.701e55], 0
    │   │   │   │   ├─ emit Swap(id: 0xb237daa34ab67e7d46e9f6300d52188e6f562906e85a484726bd05cb2c36f477, sender: PoolSwapTest: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], amount0: -450000000000000000 [-4.5e17], amount1: 435797445902528023 [4.357e17], sqrtPriceX96: 76486657988179834057663208206 [7.648e28], liquidity: 10000000000000000000 [1e19], tick: -705, fee: 3000)
    │   │   │   │   ├─ [364123] 0x00000000000000000000000000000000000000C8::afterSwap(PoolSwapTest: [0x2e234DAe75C793f67A35089C9d99245E1C58470b], PoolKey({ currency0: 0x15cF58144EF33af1e14b5208015d11F9143E27b9, currency1: 0x212224D2F2d262cd093eE13240ca4873fcCBbA3C, fee: 3000, tickSpacing: 60, hooks: 0x00000000000000000000000000000000000000C8 }), SwapParams({ zeroForOne: true, amountSpecified: -500000000000000000 [-5e17], sqrtPriceLimitX96: 4295128740 [4.295e9] }), -153127065114422308558518573344295695154764202554097471977 [-1.531e56], 0x0000000000000000000000000000000000000000000000000000000000000001)
    │   │   │   │   │   ├─ emit AfterSwapExecuted(user: ECRecover: [0x0000000000000000000000000000000000000001], delta: -153127065114422308558518573344295695154764202554097471977 [-1.531e56])
    │   │   │   │   │   ├─ [16697] SpendSaveStorage::getSwapContext(ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   │   │   │   │   │   └─ ← [Return] SwapContext({ hasStrategy: true, currentPercentage: 1000, roundUpSavings: false, enableDCA: false, dcaTargetToken: 0x0000000000000000000000000000000000000000, currentTick: 0, savingsTokenType: 1, specificSavingsToken: 0x0000000000000000000000000000000000000000, inputToken: 0x15cF58144EF33af1e14b5208015d11F9143E27b9, inputAmount: 500000000000000000 [5e17], pendingSaveAmount: 50000000000000000 [5e16] })
    │   │   │   │   │   ├─ [1609] 0x00000000000000000000000000000000000000C8::checkModulesInitialized() [staticcall]
    │   │   │   │   │   │   └─ ← [Stop] 
    │   │   │   │   │   ├─ [4697] SpendSaveStorage::getSwapContext(ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   │   │   │   │   │   └─ ← [Return] SwapContext({ hasStrategy: true, currentPercentage: 1000, roundUpSavings: false, enableDCA: false, dcaTargetToken: 0x0000000000000000000000000000000000000000, currentTick: 0, savingsTokenType: 1, specificSavingsToken: 0x0000000000000000000000000000000000000000, inputToken: 0x15cF58144EF33af1e14b5208015d11F9143E27b9, inputAmount: 500000000000000000 [5e17], pendingSaveAmount: 50000000000000000 [5e16] })
    │   │   │   │   │   ├─ [313620] 0x00000000000000000000000000000000000000C8::processSavingsExternal(ECRecover: [0x0000000000000000000000000000000000000001], SwapContext({ hasStrategy: true, currentPercentage: 1000, roundUpSavings: false, enableDCA: false, dcaTargetToken: 0x0000000000000000000000000000000000000000, currentTick: 0, savingsTokenType: 1, specificSavingsToken: 0x0000000000000000000000000000000000000000, inputToken: 0x15cF58144EF33af1e14b5208015d11F9143E27b9, inputAmount: 500000000000000000 [5e17], pendingSaveAmount: 50000000000000000 [5e16] }), PoolKey({ currency0: 0x15cF58144EF33af1e14b5208015d11F9143E27b9, currency1: 0x212224D2F2d262cd093eE13240ca4873fcCBbA3C, fee: 3000, tickSpacing: 60, hooks: 0x00000000000000000000000000000000000000C8 }), -153127065114422308558518573344295695154764202554097471977 [-1.531e56])
    │   │   │   │   │   │   ├─ emit TokenHandlingDetails(token: MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], savedAmount: 50000000000000000 [5e16], hookBalance: 0)
    │   │   │   │   │   │   ├─ [298744] TestSavingStrategy::processInputSavingsAfterSwap(ECRecover: [0x0000000000000000000000000000000000000001], SwapContext({ hasStrategy: true, currentPercentage: 1000, roundUpSavings: false, enableDCA: false, dcaTargetToken: 0x0000000000000000000000000000000000000000, currentTick: 0, savingsTokenType: 1, specificSavingsToken: 0x0000000000000000000000000000000000000000, inputToken: 0x15cF58144EF33af1e14b5208015d11F9143E27b9, inputAmount: 500000000000000000 [5e17], pendingSaveAmount: 50000000000000000 [5e16] }))
    │   │   │   │   │   │   │   ├─ [998] SpendSaveStorage::spendSaveHook() [staticcall]
    │   │   │   │   │   │   │   │   └─ ← [Return] 0x00000000000000000000000000000000000000C8
    │   │   │   │   │   │   │   ├─ emit ProcessInputSavingsAfterSwapCalled(actualUser: ECRecover: [0x0000000000000000000000000000000000000001], inputToken: MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], pendingSaveAmount: 50000000000000000 [5e16])
    │   │   │   │   │   │   │   ├─ [27787] SpendSaveStorage::calculateAndTransferFee(ECRecover: [0x0000000000000000000000000000000000000001], MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], 50000000000000000 [5e16])
    │   │   │   │   │   │   │   │   └─ ← [Return] 49600000000000000 [4.96e16]
    │   │   │   │   │   │   │   ├─ [255773] Savings::processSavings(ECRecover: [0x0000000000000000000000000000000000000001], MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], 49600000000000000 [4.96e16])
    │   │   │   │   │   │   │   │   ├─ [998] SpendSaveStorage::spendSaveHook() [staticcall]
    │   │   │   │   │   │   │   │   │   └─ ← [Return] 0x00000000000000000000000000000000000000C8
    │   │   │   │   │   │   │   │   ├─ [2031] SpendSaveStorage::calculateAndTransferFee(ECRecover: [0x0000000000000000000000000000000000000001], MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], 49600000000000000 [4.96e16])
    │   │   │   │   │   │   │   │   │   └─ ← [Return] 49203200000000000 [4.92e16]
    │   │   │   │   │   │   │   │   ├─ [23232] SpendSaveStorage::increaseSavings(ECRecover: [0x0000000000000000000000000000000000000001], MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], 49203200000000000 [4.92e16])
    │   │   │   │   │   │   │   │   │   └─ ← [Stop] 
    │   │   │   │   │   │   │   │   ├─ [139257] Token::mintSavingsToken(ECRecover: [0x0000000000000000000000000000000000000001], MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], 49203200000000000 [4.92e16])
    │   │   │   │   │   │   │   │   │   ├─ [998] SpendSaveStorage::spendSaveHook() [staticcall]
    │   │   │   │   │   │   │   │   │   │   └─ ← [Return] 0x00000000000000000000000000000000000000C8
    │   │   │   │   │   │   │   │   │   ├─ [3718] SpendSaveStorage::tokenToId(MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9]) [staticcall]
    │   │   │   │   │   │   │   │   │   │   └─ ← [Return] 0
    │   │   │   │   │   │   │   │   │   ├─ [1718] SpendSaveStorage::tokenToId(MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9]) [staticcall]
    │   │   │   │   │   │   │   │   │   │   └─ ← [Return] 0
    │   │   │   │   │   │   │   │   │   ├─ [4494] SpendSaveStorage::getNextTokenId() [staticcall]
    │   │   │   │   │   │   │   │   │   │   └─ ← [Return] 1
    │   │   │   │   │   │   │   │   │   ├─ [5523] SpendSaveStorage::incrementNextTokenId()
    │   │   │   │   │   │   │   │   │   │   └─ ← [Return] 1
    │   │   │   │   │   │   │   │   │   ├─ [21766] SpendSaveStorage::setTokenToId(MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], 1)
    │   │   │   │   │   │   │   │   │   │   └─ ← [Stop] 
    │   │   │   │   │   │   │   │   │   ├─ [24370] SpendSaveStorage::setIdToToken(1, MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9])
    │   │   │   │   │   │   │   │   │   │   └─ ← [Stop] 
    │   │   │   │   │   │   │   │   │   ├─ emit TokenRegistered(token: MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], tokenId: 1)
    │   │   │   │   │   │   │   │   │   ├─ [2463] SpendSaveStorage::calculateAndTransferFee(ECRecover: [0x0000000000000000000000000000000000000001], MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], 49203200000000000 [4.92e16])
    │   │   │   │   │   │   │   │   │   │   └─ ← [Return] 48809574400000000 [4.88e16]
    │   │   │   │   │   │   │   │   │   ├─ [954] SpendSaveStorage::treasury() [staticcall]
    │   │   │   │   │   │   │   │   │   │   └─ ← [Return] RIPEMD-160: [0x0000000000000000000000000000000000000003]
    │   │   │   │   │   │   │   │   │   ├─ [23716] SpendSaveStorage::increaseBalance(RIPEMD-160: [0x0000000000000000000000000000000000000003], 1, 393625600000000 [3.936e14])
    │   │   │   │   │   │   │   │   │   │   └─ ← [Stop] 
    │   │   │   │   │   │   │   │   │   ├─ emit Transfer(sender: 0x0000000000000000000000000000000000000000, receiver: RIPEMD-160: [0x0000000000000000000000000000000000000003], id: 1, amount: 393625600000000 [3.936e14])
    │   │   │   │   │   │   │   │   │   ├─ emit TreasuryFeeCollected(user: ECRecover: [0x0000000000000000000000000000000000000001], token: MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], amount: 393625600000000 [3.936e14])
    │   │   │   │   │   │   │   │   │   ├─ [23716] SpendSaveStorage::increaseBalance(ECRecover: [0x0000000000000000000000000000000000000001], 1, 48809574400000000 [4.88e16])
    │   │   │   │   │   │   │   │   │   │   └─ ← [Stop] 
    │   │   │   │   │   │   │   │   │   ├─ emit Transfer(sender: 0x0000000000000000000000000000000000000000, receiver: ECRecover: [0x0000000000000000000000000000000000000001], id: 1, amount: 48809574400000000 [4.88e16])
    │   │   │   │   │   │   │   │   │   ├─ emit SavingsTokenMinted(user: ECRecover: [0x0000000000000000000000000000000000000001], token: MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], tokenId: 1, amount: 48809574400000000 [4.88e16])
    │   │   │   │   │   │   │   │   │   └─ ← [Return] 
    │   │   │   │   │   │   │   │   ├─ [67977] SpendSaveStorage::updateSavingsData(ECRecover: [0x0000000000000000000000000000000000000001], MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], 49203200000000000 [4.92e16])
    │   │   │   │   │   │   │   │   │   └─ ← [Stop] 
    │   │   │   │   │   │   │   │   ├─ [3201] SpendSaveStorage::getSavingsData(ECRecover: [0x0000000000000000000000000000000000000001], MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9]) [staticcall]
    │   │   │   │   │   │   │   │   │   └─ ← [Return] 49203200000000000 [4.92e16], 1, 1, 0
    │   │   │   │   │   │   │   │   ├─ [1298] SpendSaveStorage::getUserSavingStrategy(ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   │   │   │   │   │   │   │   │   └─ ← [Return] 1000, 0, 1000, 0, false, false, 1, 0x0000000000000000000000000000000000000000
    │   │   │   │   │   │   │   │   ├─ [1201] SpendSaveStorage::getSavingsData(ECRecover: [0x0000000000000000000000000000000000000001], MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9]) [staticcall]
    │   │   │   │   │   │   │   │   │   └─ ← [Return] 49203200000000000 [4.92e16], 1, 1, 0
    │   │   │   │   │   │   │   │   ├─ emit AmountSaved(user: ECRecover: [0x0000000000000000000000000000000000000001], token: MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], amount: 49203200000000000 [4.92e16], totalSaved: 49203200000000000 [4.92e16])
    │   │   │   │   │   │   │   │   └─ ← [Stop] 
    │   │   │   │   │   │   │   ├─ emit SavingsProcessedSuccessfully(actualUser: ECRecover: [0x0000000000000000000000000000000000000001], token: MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], amount: 49600000000000000 [4.96e16])
    │   │   │   │   │   │   │   └─ ← [Return] true
    │   │   │   │   │   │   ├─ [8525] TestSavingStrategy::updateSavingStrategy(ECRecover: [0x0000000000000000000000000000000000000001], SwapContext({ hasStrategy: true, currentPercentage: 1000, roundUpSavings: false, enableDCA: false, dcaTargetToken: 0x0000000000000000000000000000000000000000, currentTick: 0, savingsTokenType: 1, specificSavingsToken: 0x0000000000000000000000000000000000000000, inputToken: 0x15cF58144EF33af1e14b5208015d11F9143E27b9, inputAmount: 500000000000000000 [5e17], pendingSaveAmount: 50000000000000000 [5e16] }))
    │   │   │   │   │   │   │   ├─ [998] SpendSaveStorage::spendSaveHook() [staticcall]
    │   │   │   │   │   │   │   │   └─ ← [Return] 0x00000000000000000000000000000000000000C8
    │   │   │   │   │   │   │   ├─ [1298] SpendSaveStorage::getUserSavingStrategy(ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   │   │   │   │   │   │   │   └─ ← [Return] 1000, 0, 1000, 0, false, false, 1, 0x0000000000000000000000000000000000000000
    │   │   │   │   │   │   │   └─ ← [Stop] 
    │   │   │   │   │   │   └─ ← [Stop] 
    │   │   │   │   │   ├─ [2858] SpendSaveStorage::deleteSwapContext(ECRecover: [0x0000000000000000000000000000000000000001])
    │   │   │   │   │   │   └─ ← [Return] 
    │   │   │   │   │   ├─ [7684] DailySavings::hasPendingDailySavings(ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   │   │   │   │   │   ├─ [4353] SpendSaveStorage::getUserSavingsTokens(ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   │   │   │   │   │   │   └─ ← [Return] []
    │   │   │   │   │   │   └─ ← [Return] false
    │   │   │   │   │   └─ ← [Return] 0xb47b2fb1, 0
    │   │   │   │   └─ ← [Return] -170141183460469231731687303715884105727564202554097471977 [-1.701e56]
    │   │   │   ├─ [552] MockERC20::balanceOf(ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   │   │   │   └─ ← [Return] 10000000000000000000000 [1e22]
    │   │   │   ├─ [552] MockERC20::balanceOf(PoolManager: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f]) [staticcall]
    │   │   │   │   └─ ← [Return] 10089770927164204436 [1.008e19]
    │   │   │   ├─ [862] PoolManager::exttload(0x85be7c2bd5cfd9e6e3a30072d5be012f0c0649c579d3433f4d5ee458bdb429be) [staticcall]
    │   │   │   │   └─ ← [Return] 0xfffffffffffffffffffffffffffffffffffffffffffffffff90fa4a62c4e0000
    │   │   │   ├─ [552] MockERC20::balanceOf(ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   │   │   │   └─ ← [Return] 10000000000000000000000 [1e22]
    │   │   │   ├─ [552] MockERC20::balanceOf(PoolManager: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f]) [staticcall]
    │   │   │   │   └─ ← [Return] 10089770927164204436 [1.008e19]
    │   │   │   ├─ [862] PoolManager::exttload(0xec1690143798fa6d9be0e2ae9987311729015febf65e065811da6492f94dd07b) [staticcall]
    │   │   │   │   └─ ← [Return] 0x000000000000000000000000000000000000000000000000060c4377d50aee17
    │   │   │   ├─ [6694] PoolManager::burn(ECRecover: [0x0000000000000000000000000000000000000001], 124512733235148509670984850249661524172173354937 [1.245e47], 500000000000000000 [5e17])
    │   │   │   │   └─ ← [Revert] panic: arithmetic underflow or overflow (0x11)
    │   │   │   └─ ← [Revert] panic: arithmetic underflow or overflow (0x11)
    │   │   └─ ← [Revert] panic: arithmetic underflow or overflow (0x11)
    │   └─ ← [Revert] panic: arithmetic underflow or overflow (0x11)
    ├─ [0] console::log("  Swap failed with bytes error:", "Unknown error") [staticcall]
    │   └─ ← [Stop] 
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return] 
    ├─ [552] MockERC20::balanceOf(ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   └─ ← [Return] 10000000000000000000000 [1e22]
    ├─ [0] console::log("User1 token0 balance after swap:", 10000000000000000000000 [1e22]) [staticcall]
    │   └─ ← [Stop] 
    ├─ [3489] SpendSaveStorage::savings(ECRecover: [0x0000000000000000000000000000000000000001], MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9]) [staticcall]
    │   └─ ← [Return] 0
    ├─ [0] console::log("User1 savings balance:", 0) [staticcall]
    │   └─ ← [Stop] 
    ├─ [0] VM::assertTrue(false, "User should have spent token0") [staticcall]
    │   └─ ← [Revert] User should have spent token0
    └─ ← [Revert] User should have spent token0

[PASS] testSetup() (gas: 12923)
Logs:
  ============ SETUP START ============
  Deploying core contracts...
  Deploying storage...
  Deploying modules...
  Hook deployed at: 0x00000000000000000000000000000000000000C8
  Hook flags: 200
  ============ SETUP COMPLETE ============
  Initializing test pool with hook...
  Pool initialized successfully
  Liquidity added in -60 to +60 range
  Liquidity added in -120 to +120 range
  Liquidity added for full range
  Setup test passed!

[PASS] testWithOutputTokenSavings() (gas: 800843)
Logs:
  ============ SETUP START ============
  Deploying core contracts...
  Deploying storage...
  Deploying modules...
  Hook deployed at: 0x00000000000000000000000000000000000000C8
  Hook flags: 200
  ============ SETUP COMPLETE ============
  Initializing test pool with hook...
  Pool initialized successfully
  Liquidity added in -60 to +60 range
  Liquidity added in -120 to +120 range
  Liquidity added for full range
  Output Savings Strategy Percentage: 1000
  Output Savings Type: 0
  User1 token1 savings before swap: 0
  Performing swap:
    Sender: 0x0000000000000000000000000000000000000001
    Zero for One: true
    Amount Specified: 500000000000000000
    TokenIn: 0x15cF58144EF33af1e14b5208015d11F9143E27b9
    TokenOut: 0x212224D2F2d262cd093eE13240ca4873fcCBbA3C
    BalanceInBefore: 10000000000000000000000
    BalanceOutBefore: 10000000000000000000000
    Including sender in hook data
    Swap failed with bytes error: Unknown error
  Swap failed, skipping rest of test

[FAIL: Treasury should have received fee: 7968000000000000 != 4000000000000000] test_DirectSavings() (gas: 399109)
Logs:
  ============ SETUP START ============
  Deploying core contracts...
  Deploying storage...
  Deploying modules...
  Hook deployed at: 0x00000000000000000000000000000000000000C8
  Hook flags: 200
  ============ SETUP COMPLETE ============
  Initializing test pool with hook...
  Pool initialized successfully
  Liquidity added in -60 to +60 range
  Liquidity added in -120 to +120 range
  Liquidity added for full range
  User1 savings balance before: 0
  User1 savings balance after: 496000000000000000
  Treasury savings balance: 7968000000000000

Traces:
  [399109] SpendSaveHookTest::test_DirectSavings()
    ├─ [3489] SpendSaveStorage::savings(ECRecover: [0x0000000000000000000000000000000000000001], MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9]) [staticcall]
    │   └─ ← [Return] 0
    ├─ [0] console::log("User1 savings balance before:", 0) [staticcall]
    │   └─ ← [Stop] 
    ├─ [0] VM::startPrank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [24305] MockERC20::approve(Savings: [0x96d3F6c20EEd2697647F543fE6C08bC2Fbf39758], 500000000000000000 [5e17])
    │   ├─ emit Approval(owner: ECRecover: [0x0000000000000000000000000000000000000001], spender: Savings: [0x96d3F6c20EEd2697647F543fE6C08bC2Fbf39758], amount: 500000000000000000 [5e17])
    │   └─ ← [Return] true
    ├─ [334384] Savings::depositSavings(ECRecover: [0x0000000000000000000000000000000000000001], MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], 500000000000000000 [5e17])
    │   ├─ [30116] MockERC20::transferFrom(ECRecover: [0x0000000000000000000000000000000000000001], Savings: [0x96d3F6c20EEd2697647F543fE6C08bC2Fbf39758], 500000000000000000 [5e17])
    │   │   ├─ emit Transfer(from: ECRecover: [0x0000000000000000000000000000000000000001], to: Savings: [0x96d3F6c20EEd2697647F543fE6C08bC2Fbf39758], amount: 500000000000000000 [5e17])
    │   │   └─ ← [Return] true
    │   ├─ [31931] SpendSaveStorage::calculateAndTransferFee(ECRecover: [0x0000000000000000000000000000000000000001], MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], 500000000000000000 [5e17])
    │   │   └─ ← [Return] 496000000000000000 [4.96e17]
    │   ├─ [21232] SpendSaveStorage::increaseSavings(ECRecover: [0x0000000000000000000000000000000000000001], MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], 496000000000000000 [4.96e17])
    │   │   └─ ← [Stop] 
    │   ├─ [147257] Token::mintSavingsToken(ECRecover: [0x0000000000000000000000000000000000000001], MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], 496000000000000000 [4.96e17])
    │   │   ├─ [2998] SpendSaveStorage::spendSaveHook() [staticcall]
    │   │   │   └─ ← [Return] 0x00000000000000000000000000000000000000C8
    │   │   ├─ [3718] SpendSaveStorage::tokenToId(MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9]) [staticcall]
    │   │   │   └─ ← [Return] 0
    │   │   ├─ [1718] SpendSaveStorage::tokenToId(MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9]) [staticcall]
    │   │   │   └─ ← [Return] 0
    │   │   ├─ [10494] SpendSaveStorage::getNextTokenId() [staticcall]
    │   │   │   └─ ← [Return] 1
    │   │   ├─ [5523] SpendSaveStorage::incrementNextTokenId()
    │   │   │   └─ ← [Return] 1
    │   │   ├─ [21766] SpendSaveStorage::setTokenToId(MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], 1)
    │   │   │   └─ ← [Stop] 
    │   │   ├─ [24370] SpendSaveStorage::setIdToToken(1, MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9])
    │   │   │   └─ ← [Stop] 
    │   │   ├─ emit TokenRegistered(token: MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], tokenId: 1)
    │   │   ├─ [2463] SpendSaveStorage::calculateAndTransferFee(ECRecover: [0x0000000000000000000000000000000000000001], MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], 496000000000000000 [4.96e17])
    │   │   │   └─ ← [Return] 492032000000000000 [4.92e17]
    │   │   ├─ [954] SpendSaveStorage::treasury() [staticcall]
    │   │   │   └─ ← [Return] RIPEMD-160: [0x0000000000000000000000000000000000000003]
    │   │   ├─ [23716] SpendSaveStorage::increaseBalance(RIPEMD-160: [0x0000000000000000000000000000000000000003], 1, 3968000000000000 [3.968e15])
    │   │   │   └─ ← [Stop] 
    │   │   ├─ emit Transfer(sender: 0x0000000000000000000000000000000000000000, receiver: RIPEMD-160: [0x0000000000000000000000000000000000000003], id: 1, amount: 3968000000000000 [3.968e15])
    │   │   ├─ emit TreasuryFeeCollected(user: ECRecover: [0x0000000000000000000000000000000000000001], token: MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], amount: 3968000000000000 [3.968e15])
    │   │   ├─ [23716] SpendSaveStorage::increaseBalance(ECRecover: [0x0000000000000000000000000000000000000001], 1, 492032000000000000 [4.92e17])
    │   │   │   └─ ← [Stop] 
    │   │   ├─ emit Transfer(sender: 0x0000000000000000000000000000000000000000, receiver: ECRecover: [0x0000000000000000000000000000000000000001], id: 1, amount: 492032000000000000 [4.92e17])
    │   │   ├─ emit SavingsTokenMinted(user: ECRecover: [0x0000000000000000000000000000000000000001], token: MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], tokenId: 1, amount: 492032000000000000 [4.92e17])
    │   │   └─ ← [Return] 
    │   ├─ [67977] SpendSaveStorage::updateSavingsData(ECRecover: [0x0000000000000000000000000000000000000001], MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], 496000000000000000 [4.96e17])
    │   │   └─ ← [Stop] 
    │   ├─ [3201] SpendSaveStorage::getSavingsData(ECRecover: [0x0000000000000000000000000000000000000001], MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9]) [staticcall]
    │   │   └─ ← [Return] 496000000000000000 [4.96e17], 1, 1, 0
    │   ├─ [11298] SpendSaveStorage::getUserSavingStrategy(ECRecover: [0x0000000000000000000000000000000000000001]) [staticcall]
    │   │   └─ ← [Return] 1000, 0, 1000, 0, false, false, 1, 0x0000000000000000000000000000000000000000
    │   ├─ [1201] SpendSaveStorage::getSavingsData(ECRecover: [0x0000000000000000000000000000000000000001], MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9]) [staticcall]
    │   │   └─ ← [Return] 496000000000000000 [4.96e17], 1, 1, 0
    │   ├─ emit AmountSaved(user: ECRecover: [0x0000000000000000000000000000000000000001], token: MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9], amount: 496000000000000000 [4.96e17], totalSaved: 496000000000000000 [4.96e17])
    │   └─ ← [Return] 
    ├─ [0] VM::stopPrank()
    │   └─ ← [Return] 
    ├─ [1489] SpendSaveStorage::savings(ECRecover: [0x0000000000000000000000000000000000000001], MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9]) [staticcall]
    │   └─ ← [Return] 496000000000000000 [4.96e17]
    ├─ [0] console::log("User1 savings balance after:", 496000000000000000 [4.96e17]) [staticcall]
    │   └─ ← [Stop] 
    ├─ [1612] SpendSaveStorage::treasuryFee() [staticcall]
    │   └─ ← [Return] 80
    ├─ [0] VM::assertGt(496000000000000000 [4.96e17], 0, "Savings should have increased") [staticcall]
    │   └─ ← [Return] 
    ├─ [0] VM::assertEq(496000000000000000 [4.96e17], 496000000000000000 [4.96e17], "Savings should match expected amount") [staticcall]
    │   └─ ← [Return] 
    ├─ [1489] SpendSaveStorage::savings(RIPEMD-160: [0x0000000000000000000000000000000000000003], MockERC20: [0x15cF58144EF33af1e14b5208015d11F9143E27b9]) [staticcall]
    │   └─ ← [Return] 7968000000000000 [7.968e15]
    ├─ [0] console::log("Treasury savings balance:", 7968000000000000 [7.968e15]) [staticcall]
    │   └─ ← [Stop] 
    ├─ [0] VM::assertEq(7968000000000000 [7.968e15], 4000000000000000 [4e15], "Treasury should have received fee") [staticcall]
    │   └─ ← [Revert] Treasury should have received fee: 7968000000000000 != 4000000000000000
    └─ ← [Revert] Treasury should have received fee: 7968000000000000 != 4000000000000000

[PASS] test_RealSwapWithInputSavings() (gas: 849482)
Logs:
  ============ SETUP START ============
  Deploying core contracts...
  Deploying storage...
  Deploying modules...
  Hook deployed at: 0x00000000000000000000000000000000000000C8
  Hook flags: 200
  ============ SETUP COMPLETE ============
  Initializing test pool with hook...
  Pool initialized successfully
  Liquidity added in -60 to +60 range
  Liquidity added in -120 to +120 range
  Liquidity added for full range
  Savings Strategy Percentage: 1000
  Savings Type: 1
  User1 token0 balance before swap: 10000000000000000000000
  User1 savings balance before: 0
  Performing swap:
    Sender: 0x0000000000000000000000000000000000000001
    Zero for One: true
    Amount Specified: 500000000000000000
    TokenIn: 0x15cF58144EF33af1e14b5208015d11F9143E27b9
    TokenOut: 0x212224D2F2d262cd093eE13240ca4873fcCBbA3C
    BalanceInBefore: 10000000000000000000000
    BalanceOutBefore: 10000000000000000000000
    Expected savings (10%): 50000000000000000
    Including sender in hook data
    Swap failed with bytes error: Unknown error
  Swap failed, skipping rest of test

Suite result: FAILED. 3 passed; 2 failed; 0 skipped; finished in 13.30ms (8.24ms CPU time)

Ran 1 test suite in 1.13s (13.30ms CPU time): 3 tests passed, 2 failed, 0 skipped (5 total tests)

Failing tests:
Encountered 2 failing tests in test/SpendSaveHook.t.sol:SpendSaveHookTest
[FAIL: User should have spent token0] testBasicSwap() (gas: 853542)
[FAIL: Treasury should have received fee: 7968000000000000 != 4000000000000000] test_DirectSavings() (gas: 399109)

Encountered a total of 2 failing tests, 3 tests succeeded
